// This file was auto-generated by ML.NET Model Builder. 

using Microsoft.ML;
using Microsoft.ML.Trainers;

namespace MLsentiment;

public partial class SentimentModel
{
    public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
    {
        var pipeline = BuildPipeline(context);
        var model = pipeline.Fit(trainData);

        return model;
    }

    /// <summary>
    ///     build the pipeline that is used from model builder. Use this function to retrain model.
    /// </summary>
    /// <param name="mlContext"></param>
    /// <returns></returns>
    public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
    {
        // Data process configuration with pipeline data transformations
        var pipeline = mlContext.Transforms.Text.FeaturizeText(inputColumnName: @"col0", outputColumnName: @"col0")
            .Append(mlContext.Transforms.Concatenate(@"Features", @"col0"))
            .Append(mlContext.Transforms.Conversion.MapValueToKey(@"col1", @"col1"))
            .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))
            .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(
                mlContext.BinaryClassification.Trainers.LbfgsLogisticRegression(
                    new LbfgsLogisticRegressionBinaryTrainer.Options
                    {
                        L1Regularization = 1F, L2Regularization = 1F, LabelColumnName = @"col1",
                        FeatureColumnName = @"Features"
                    }), @"col1"))
            .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

        return pipeline;
    }
}